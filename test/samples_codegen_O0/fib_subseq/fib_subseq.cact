int	dp[266][266];
int	arr[266] = {0, 5, 7, 8, 9, 12, 15, 17, 21, 28, 30, 35, 37, 46, 50, 52, 55, 62, 65, 72, 76, 83, 84, 89, 91, 93, 98, 99, 102, 108, 118, 120, 123, 124, 125, 127, 128, 132, 136, 143, 145, 147, 148, 152, 154, 157, 158, 170, 174, 176, 179, 180, 181, 184, 187, 189, 192, 193, 195, 196, 204, 205, 210, 212, 213, 219, 220, 221, 223, 224, 225, 226, 234, 236, 237, 241, 249, 250, 256, 257, 260, 261, 266, 267, 269, 274, 276, 279, 280, 282, 283, 284, 286, 292, 294, 300, 307, 309, 310, 314, 320, 323, 326, 327, 329, 330, 332, 337, 346, 347, 348, 350, 351, 353, 354, 355, 356, 358, 362, 363, 365, 368, 371, 372, 375, 376, 378, 380, 381, 385, 392, 394, 395, 397, 402, 407, 408, 413, 414, 417, 419, 420, 425, 432, 433, 434, 439, 442, 443, 445, 448, 449, 452, 453, 458, 460, 462, 470, 471, 475, 476, 477, 479, 480, 482, 487, 493, 498, 503, 506, 508, 510, 514, 517, 521, 522, 525, 529, 532, 534, 535, 540, 545, 549, 555, 556, 558, 560, 564, 566, 567, 569, 573, 575, 581, 586, 589, 591, 595, 596, 598, 599, 601, 602, 605, 611, 613, 616, 617, 618, 621, 623, 629, 630, 633, 636, 639, 642, 643, 652, 655, 658, 661, 665, 666, 667, 671, 672, 679, 681, 682, 683, 684, 686, 689, 691, 693, 696, 700, 701, 712, 718, 719, 723, 725, 728, 729, 730, 735, 736, 749, 751, 758, 761, 763, 769, 772, 773, 776, 777, 783, 788, 789, 790, 795, 799};

int lenLongestFibSubseq(int arrSize){
    int i = 1, ret = 0;
    while( i < arrSize ){
        int j;
        j = i+1;
        while( j < arrSize ){
            if( arr[j] > (2*arr[i]) ){
                break;
            }

            int target, left, right, prev, mid;
            target = arr[j] - arr[i];
            left   = 0; 
            right  = i - 1;
            prev   = -1;

            while( left <= right ){
                mid = (right - left) / 2 + left;
                if( arr[mid] == target ){
                    prev  = mid;
                    break;
                } else
                if( arr[mid] < target ){
                    left  = mid + 1;
                } else {
                    right = mid - 1;
                }
            }

            if( prev >= 0 ){
                dp[i][j] = dp[prev][i] + 1;
                if( dp[i][j] < 3 ){
                    dp[i][j] = 3;
                }
                if( dp[i][j] > ret){
                    ret = dp[i][j];
                }
            }
            j = j + 1;
        }
        i = i + 1;
    }

    return ret;
}

int main(){
    int s, r;
    s = get_int();

    r = lenLongestFibSubseq(s);
    print_int(r);

    return 0;
}
