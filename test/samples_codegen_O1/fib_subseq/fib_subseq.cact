int	dp[266][266];
int	arr[266] = {1, 5, 6, 7, 11, 14, 15, 16, 18, 21, 29, 31, 40, 45, 47, 51, 52, 55, 57, 61, 62, 64, 68, 69, 74, 75, 78, 79, 88, 90, 92, 93, 94, 100, 101, 103, 104, 105, 114, 115, 125, 126, 128, 129, 133, 140, 141, 143, 144, 146, 150, 160, 162, 166, 173, 178, 182, 183, 185, 186, 188, 191, 194, 204, 206, 216, 219, 220, 221, 225, 228, 231, 240, 244, 250, 251, 252, 257, 259, 260, 267, 270, 271, 275, 279, 280, 287, 288, 291, 292, 299, 302, 303, 310, 311, 312, 316, 317, 324, 325, 327, 328, 329, 332, 333, 337, 346, 351, 356, 358, 361, 363, 366, 370, 373, 374, 380, 383, 384, 388, 390, 391, 392, 395, 398, 399, 402, 404, 407, 410, 411, 413, 414, 417, 418, 419, 421, 425, 432, 433, 434, 435, 440, 441, 443, 444, 447, 448, 449, 452, 453, 455, 456, 460, 461, 467, 469, 475, 477, 482, 484, 487, 488, 490, 493, 494, 495, 497, 501, 504, 505, 508, 510, 512, 516, 520, 521, 526, 532, 541, 543, 544, 545, 546, 549, 550, 555, 558, 562, 563, 566, 570, 572, 579, 580, 582, 583, 584, 587, 595, 599, 606, 608, 611, 612, 620, 622, 625, 632, 636, 637, 644, 646, 648, 650, 653, 659, 662, 664, 665, 667, 672, 676, 679, 680, 681, 687, 690, 691, 692, 693, 694, 697, 698, 699, 702, 703, 708, 709, 711, 715, 716, 718, 719, 727, 730, 733, 734, 735, 739, 740, 749, 750, 758, 764, 766, 768, 771, 775, 784, 789, 790, 791, 794, 795, 799};

int lenLongestFibSubseq(int arrSize){
    int i = 1, ret = 0;
    while( i < arrSize ){
        int j;
        j = i+1;
        while( j < arrSize ){
            if( arr[j] > (2*arr[i]) ){
                break;
            }

            int target, left, right, prev, mid;
            target = arr[j] - arr[i];
            left   = 0; 
            right  = i - 1;
            prev   = -1;

            while( left <= right ){
                mid = (right - left) / 2 + left;
                if( arr[mid] == target ){
                    prev  = mid;
                    break;
                } else
                if( arr[mid] < target ){
                    left  = mid + 1;
                } else {
                    right = mid - 1;
                }
            }

            if( prev >= 0 ){
                dp[i][j] = dp[prev][i] + 1;
                if( dp[i][j] < 3 ){
                    dp[i][j] = 3;
                }
                if( dp[i][j] > ret){
                    ret = dp[i][j];
                }
            }
            j = j + 1;
        }
        i = i + 1;
    }

    return ret;
}

int main(){
    int s, r;
    s = get_int();

    r = lenLongestFibSubseq(s);
    print_int(r);

    return 0;
}
